<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[非宁静无以睡眠啊]]></title>
  <link href="http://charlescui.github.io/atom.xml" rel="self"/>
  <link href="http://charlescui.github.io/"/>
  <updated>2014-06-27T17:12:42+08:00</updated>
  <id>http://charlescui.github.io/</id>
  <author>
    <name><![CDATA[CuiZzz...]]></name>
    <email><![CDATA[cuizheng.hz@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于Long Pull的HTTP异步请求，处理高延时外部IO的设计方案。Long Pull with External IO Request and Callback]]></title>
    <link href="http://charlescui.github.io/blog/2014/05/02/long-pull-with-external-io-request-and-callback/"/>
    <updated>2014-05-02T00:07:18+08:00</updated>
    <id>http://charlescui.github.io/blog/2014/05/02/long-pull-with-external-io-request-and-callback</id>
    <content type="html"><![CDATA[<h2 id="section">背景</h2>

<ul>
  <li>接受请求的http服务器，需要处理一次高延时的外部IO</li>
  <li>实时性，当外部IO处理完毕后，请求者需要第一时间获得请求结果</li>
  <li>部署简单，不对现有系统进行大改造</li>
  <li>可靠性高，http断开后也不影响后续的请求结果获取</li>
  <li>高性能，客户端不需要轮询太频繁，这会让客户端消耗太多资源</li>
</ul>

<!--more-->

<h2 id="section-1">现实场景</h2>

<p><code>电视淘宝</code>项目，扫码绑定功能。</p>

<h3 id="section-2">介绍</h3>

<p>该功能流程如下：</p>

<ul>
  <li>用户打开账户管理页面</li>
  <li>浏览器向后台同步申请一个二维码
    <ul>
      <li>浏览器通过img标签展示生成的二维码</li>
      <li>浏览器同时轮询请求后台，询问该用户的绑定状态</li>
      <li>后台服务器轮询淘宝，询问该用户的绑定状态</li>
    </ul>
  </li>
  <li>用户掏出手机淘宝主客</li>
  <li>用户用主客扫描二维码，并且确认登陆</li>
  <li>电视淘宝后台服务器在下一次轮询的时候，将得到用户扫描后的确认状态</li>
  <li>浏览器当前打开的页面，在下一次轮询的时候，将得到用户扫描后的确认状态</li>
</ul>

<h3 id="section-3">需求</h3>

<p>由于淘宝主客服务器，并没有实现绑定后回掉的功能。所以电视淘宝后台服务器，向淘宝主客服务器轮询不可避免。但希望能解决浏览器轮询后台绑定状态，避免轮询。因为浏览器所在的机顶盒性能严重不足，多次轮询会有很高几率导致死机，所以希望能通过长连接的方式解决。</p>

<h3 id="section-4">现有框架</h3>

<ul>
  <li>web服务器：rainbows，支持Eventmachine，可实现异步IO</li>
  <li>后台任务队列：resque，无缝集成到capistrano部署系统，完善的后台任务解决方案。</li>
</ul>

<hr />

<h2 id="section-5">方案</h2>

<ul>
  <li>基于Long Pull的Http请求</li>
  <li>Eventmachine的非阻塞IO</li>
  <li>RabbitMQ的消息队列</li>
  <li>resque的后台任务</li>
</ul>

<h3 id="section-6">架构图</h3>

<p><img src="http://charlescui.github.io/images/posts/LongPullwithExternalIORequestandCallback.png" alt="架构图" title="架构图" /></p>

<h3 id="section-7">优点</h3>

<ul>
  <li>易部署
    <ul>
      <li>在现有系统上，只增加了一套AMQP系统，可通过<code>apt-get install rabbitmq</code>安装，属于系统软件，和代码无耦合，不依赖部署系统，也不需要为该系统写后台任务、daemon进程等代码，只利用该系统传递消息。</li>
    </ul>
  </li>
  <li>高可靠
    <ul>
      <li>在创建任务后，客户端得到查询结果所用的key，这个过程资源消耗极少，立即返回，不会失败。</li>
      <li>而在查询任务的时候，是基于LongPull的长连接，如果客户端请求断开，由于已经得到了key，只需要再由客户端，发起一起基于该key的查询请求即可。不会丢失数据，也不会改变查询的key，也不需要重新建立任务。</li>
    </ul>
  </li>
  <li>实时性
    <ul>
      <li>由于返回结果是基于LongPull的请求，当消息队列收到结果时，会立即推送给web服务器，web服务器则把结果返回给客户端，没有发生阻塞的可能。</li>
    </ul>
  </li>
  <li>高性能
    <ul>
      <li>客户端无需轮询，无需等待，不消耗资源。</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码分支管理及发布流程 Code Branch Manage and Publish Work Flow]]></title>
    <link href="http://charlescui.github.io/blog/2014/05/01/code-branch-manage-and-publish-work-flow/"/>
    <updated>2014-05-01T10:18:32+08:00</updated>
    <id>http://charlescui.github.io/blog/2014/05/01/code-branch-manage-and-publish-work-flow</id>
    <content type="html"><![CDATA[<h2 id="section">代码分支</h2>

<p>之前在阿里，公司内部采用SVN作为代码管理工具。自从创业后，我一直在使用GIT作为代码管理工具。</p>

<!--more-->

<p>项目常驻分支:</p>

<ul>
  <li>master</li>
  <li>pre</li>
  <li>devel</li>
  <li>local</li>
</ul>

<p>分支状态:</p>

<ul>
  <li>冻结状态：不允许代码提交</li>
  <li>活跃状态：允许代码提交</li>
</ul>

<h3 id="master">master</h3>

<p>git仓库新建，通过<code>git clone</code>被clone到本地后，会默认有一个master分支，我们称之为主干分支。主干分支要保存和生产环境一致的代码。该分支在生产环境发布之后，就处于<code>冻结状态</code>。</p>

<h3 id="pre">pre</h3>

<p>每次发布之前，将测试好的devel代码合并到pre分支，再通过部署pre分支代码提交预发布测试。pre分支保存和预发布环境一致的代码。该分支在预发布环境发布之后，就处于<code>冻结状态</code>。</p>

<h3 id="devel">devel</h3>

<p>devel分支保存开发人员自测完毕之后的代码。该分支一直是<code>活跃状态</code>，并且一直允许提交的。</p>

<h3 id="local">local</h3>

<p>local是一个<code>本地分支</code>，不允许push到远端。每个开发人员各自有一个属于自己的local分支，工程师自己的新开发需求都在该分支完成。但开发并且自测完毕后，允许提交到devel，再由devel推送到远端。该分支一直是<code>活跃状态</code>，并且一直允许提交的。</p>

<h3 id="section-1">流程图</h3>

<p>local和devel开发过程中，分支合并及提交规则如下：</p>

<p><img src="http://charlescui.github.io/images/posts/develop_work_flow.png" alt="开发流程管理" title="流程图" /></p>

<h2 id="section-2">环境</h2>

<p>项目代码运行环境:</p>

<ul>
  <li>生产环境：部署master分支</li>
  <li>预发布环境：部署pre分支</li>
  <li>测试环境：部署devel分支</li>
  <li>开发环境：开发工程师每人有一个，部署local分支</li>
</ul>

<h2 id="section-3">部署流程</h2>

<h3 id="section-4">部署测试环境</h3>

<p>我的几个项目组采用敏捷开发，backlog管理需求，通过sprint控制发布节奏，每两周发布一个可用版本。所以在每个发布点的前两到三天，我们会提交测试。</p>

<ul>
  <li>平时
    <ul>
      <li>开发人员local分支自测</li>
      <li>合并到devel分支</li>
    </ul>
  </li>
  <li>提测点(发布点前两到三天)
    <ul>
      <li>部署devel分支到测试环境</li>
      <li>提交测试工程师测试</li>
    </ul>
  </li>
</ul>

<h3 id="section-5">部署预发布环境</h3>

<ul>
  <li>devel分支提测
    <ul>
      <li>测试人员在devel分支提测成功后，由PM负责将devel合并到pre分支，并且部署预发布环境，提交预发布测试。</li>
    </ul>
  </li>
  <li>hotfix提测
    <ul>
      <li>当生产环境发现一个bug，需要立即修复，则启动hotfix流程：
        <ul>
          <li>先在pre上修复代码，并自测</li>
          <li>自测成功后，merge到devel分支，提交测试环境测试</li>
          <li>测试环境测试成功后，push到pre远端，提交预发布环境测试</li>
          <li>预发布环境测试成功后，merge到master分支，准备上生产环境测试</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-6">部署生产环境</h3>

<p>当预发布环境测试通过，测试人员通知PM发布生产环境。此时PM需要做以下事情:</p>

<ul>
  <li>给测试通过的pre分支打tag，格式如下:<code>v1.0.0</code>
    <ul>
      <li>每经历一次hotfix发布，小版本号加一</li>
      <li>每经历一次小产品改动发布，次版本号加一</li>
      <li>产品大改版，主版本号加一</li>
    </ul>
  </li>
  <li>合并pre分支到master</li>
  <li>如果是hotfix，合并pre分支到devel</li>
  <li>推送代码和tag到远端</li>
  <li>部署生产环境</li>
  <li>提交生产环境测试</li>
  <li>生产环境测试通过后，通知项目组此次发布成功</li>
</ul>

<h3 id="section-7">流程图</h3>

<p>devel分支提测及hotfix提测流程，以及产品发布流程如下：</p>

<p><img src="http://charlescui.github.io/images/posts/devel_and_hotfix_submit_test_work_flow.png" alt="开发流程管理" title="流程图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[部署基于FFMPEG的HLS直播视频服务 Deploy HLS(m3u8) Server with FFMPEG]]></title>
    <link href="http://charlescui.github.io/blog/2014/05/01/deploy-hls-m3u8-server-with-ffmpeg/"/>
    <updated>2014-05-01T08:53:59+08:00</updated>
    <id>http://charlescui.github.io/blog/2014/05/01/deploy-hls-m3u8-server-with-ffmpeg</id>
    <content type="html"><![CDATA[<p>这是一次搭建<code>直播</code>HLS服务器的经历，通过以下介绍，可以完成一套完整的直播HLS服务的部署。</p>

<!--more-->

<h2 id="ffmpeg">安装ffmpeg</h2>

<p>下载最新代码 :</p>

<p><code>git clone https://github.com/FFmpeg/FFmpeg.git</code></p>

<p>安装以下依赖的库:</p>

<pre><code>sudo apt-get install libass-dev -y
sudo apt-get install libfaac-dev -y
sudo apt-get install libmp3lame-dev -y
sudo apt-get install librtmp-dev -y
sudo apt-get install libtheora-bin -y
sudo apt-get install libtheora-dev -y
sudo apt-get install libvorbis -y
sudo apt-get install libvorbis-dev -y
sudo apt-get install libvpx-dev -y
sudo apt-get install libx264-dev -y
</code></pre>

<p>编译</p>

<ul>
  <li>./configure –enable-gpl –enable-libass –enable-libfaac –enable-libmp3lame –enable-librtmp –enable-libtheora –enable-libvorbis –enable-libvpx –enable-libx264 –enable-nonfree –enable-version3 –prefix=/usr/local/ffmpeg</li>
  <li>make -j8</li>
  <li>sudo make install</li>
</ul>

<p>安装成功后，更新环境变量:</p>

<p><code>export PATH=/usr/local/ffmpeg/bin:$PATH</code></p>

<h2 id="ffmpeg-1">启动ffmpeg</h2>

<h3 id="section">需求:</h3>

<ul>
  <li>输入源是UDP的组播信号</li>
  <li>输出一个m3u8文件</li>
  <li>文件中每条记录的URL PATH前缀为:<code>/hunanweishi</code></li>
  <li>其中每条记录长10秒</li>
  <li>每个切片文件格式为ts格式</li>
  <li>每个切片文件名称格式为:<code>seg-%03d.ts</code></li>
</ul>

<p>启动命令如下:
<code>ffmpeg -i udp://xxx.xxx.xxx.xxx:30000 -f segment -codec copy -map 0 -vbsf h264_mp4toannexb -flags -global_header -segment_format mpegts -segment_list hunanweishi.m3u8 -segment_time 10 -segment_list_entry_prefix /hunanweishi/ -segment_list_size 5 seg-%03d.ts</code></p>

<p>关键参数解释:</p>

<ul>
  <li>‘segment_format format’
    <ul>
      <li>Override the inner container format, by default it is guessed by the filename extension.</li>
    </ul>
  </li>
  <li>‘segment_list name’
    <ul>
      <li>Generate also a listfile named name. If not specified no listfile is generated.</li>
    </ul>
  </li>
  <li>‘segment_list_size size’
    <ul>
      <li>Update the list file so that it contains at most the last size segments. If 0 the list file will contain all the segments. Default value is 0.</li>
    </ul>
  </li>
  <li>‘segment_list_entry_prefix prefix’
    <ul>
      <li>Prepend prefix to each entry. Useful to generate absolute paths. By default no prefix is applied.</li>
    </ul>
  </li>
  <li>‘segment_time time’
    <ul>
      <li>Set segment duration to time, the value must be a duration specification. Default value is “2”. See also the ‘segment_times’ option.</li>
      <li>Note that splitting may not be accurate, unless you force the reference stream key-frames at the given time. See the introductory notice and the examples below.</li>
    </ul>
  </li>
  <li>‘segment_times times’
    <ul>
      <li>Specify a list of split points. times contains a list of comma separated duration specifications, in increasing order. See also the ‘segment_time’ option.</li>
    </ul>
  </li>
</ul>

<p>其余参数见官网：<a href="https://www.ffmpeg.org/ffmpeg-formats.html#segment_002c-stream_005fsegment_002c-ssegment">ffmpeg的segment官网介绍</a></p>

<p>备注:由于是在screen中启动，所以没有将其变为daemon进程。如果需要改变视频分辨率、码流，可以自行增加ffmpeg参数。</p>

<h2 id="m3u8">m3u8内容分析</h2>

<h4 id="hunanweishim3u8">截取hunanweishi.m3u8的内容片段</h4>

<pre><code>#EXTM3U
#EXT-X-VERSION:3
#EXT-X-MEDIA-SEQUENCE:0
#EXT-X-ALLOW-CACHE:YES
#EXT-X-TARGETDURATION:11
#EXTINF:9.983689,
/huashufuwu/seg-000.ts
#EXTINF:10.120000,
/huashufuwu/seg-001.ts
</code></pre>

<h4 id="section-1">注意</h4>
<ul>
  <li>/huashufuwu/,这个文件前缀是ffmpeg命令中，segment_list_entry_prefix参数指定的，可以帮助使用者在配置Nginx的时候，规划静态资源路径.</li>
  <li>segment_list_size参数指定一个m3u8文件中有多少个视频，默认为0.
    <ul>
      <li>如果不设置，m3u8文件中会包含所有生成的视频片段，不建议用默认参数.</li>
      <li>如果设置，比如我们设置为5，ffmpeg会在生成到第<code>n*5-1</code>个文件时候，更新m3u8文件。我们可以利用这个更新机制，实现的清理过期视频片段，否则磁盘会被用光。</li>
    </ul>
  </li>
</ul>

<h2 id="ruby">Ruby监控脚本</h2>

<p>为了避免生成太多ts文件，没有及时删除导致占用磁盘空间，所以需要一个删除ts文件的方案。</p>

<h3 id="section-2">方案</h3>

<ul>
  <li>采用<code>inotify</code>内核调用机制，避免轮询导致消耗资源，这样可以一个监控进程监控多个文件，而且只占用很少的系统资源。</li>
  <li>先对m3u8文件注册监听，当得到修改信号时，根据m3u8当前的sequence，查找已过期的ts文件列表，并删除。</li>
  <li>但要保留部分近期的ts文件，因为网速慢的用户可能还没有下载完。</li>
</ul>

<h3 id="section-3">实现</h3>

<ul>
  <li>生成文件:<code>touch clean.rb</code></li>
  <li>使其可执行:<code>chmod +x clean.rb</code></li>
  <li>写入下面代码</li>
</ul>

<p>代码如下:</p>

<pre><code>#!/usr/bin/env ruby
require "fileutils"
require "eventmachine"

$fnreg = /.*seg-(\d+)\.ts$/
$m3u8 = ARGV[0]

module Handler
    def file_modified
        puts "#{path} modified"
        clean
    end

    def file_moved
        puts "#{path} moved"
    end

    def file_deleted
        puts "#{path} deleted"
    end

    def unbind
        puts "#{path} monitoring ceased"
    end

    def clean
        seq = `cat #{path} |grep "#EXT-X-MEDIA-SEQUENCE:"|grep -v grep|cut -f2 -d\:`.chomp.to_i
        Dir[File.join(File.dirname($m3u8), '*.ts')].each{|x|
            name = File.basename(x)
            if($fnreg =~ name) and ($1.to_i &lt; (seq - 3))
                puts "Delete expired file #{x}, and seq #{$1}"
                FileUtils.rm_f(x)
            end
        }
    end
end

Signal.trap('QUIT'){EM.stop;puts "Stop monit #{$m3u8}."}
Signal.trap('INT'){EM.stop;puts "Stop monit #{$m3u8}."}

# for efficient file watching, use kqueue on Mac OS X
EventMachine.kqueue = true if EventMachine.kqueue?

EventMachine.run {
    EventMachine.watch_file($m3u8, Handler)
}
</code></pre>

<p>执行：<code>./clean.rb hunanweishi.m3u8</code></p>

<p>Ruby的Eventmachine库支持各种异步事件，其中包括inotify。当被监控的文件产生了删除、移动、修改等操作，监控器(Handler)都会得到回掉。</p>

<p>监控程序的输出结果片段如下：</p>

<pre><code>Delete expired file ./seg-13602.ts, and seq 13602
hunanweishi.m3u8 modified
hunanweishi.m3u8 modified
Delete expired file ./seg-13603.ts, and seq 13603
hunanweishi.m3u8 modified
hunanweishi.m3u8 modified
Delete expired file ./seg-13604.ts, and seq 13604
hunanweishi.m3u8 modified
hunanweishi.m3u8 modified
Delete expired file ./seg-13605.ts, and seq 13605
</code></pre>

<h2 id="nginx">Nginx配置</h2>

<p>对于Nginx来说，HLS可以当作一个静态服务器来处理，所以配置如下:</p>

<pre><code>server {
        listen   22280; ## listen for ipv4; this line is default and implied
        root /home/www/.ffserver/live;
        index index.html index.htm;
        location / {
                autoindex on;
                try_files $uri $uri/ /index.html;
        }
}
</code></pre>

<p>在conf/mime.types中增加如下类型:</p>

<pre><code>application/x-mpegURL                   m3u8;
video/MP2T                              ts;
</code></pre>

<p>重启Nginx</p>

<h2 id="section-4">测试</h2>

<p>使用VLC打开m3u8地址：<code>http://xxx.xxx.xxx.xxx:22280/hunanweishi/hunanweishi.m3u8</code>，可以看到直播节目了。</p>

<h3 id="section-5">测试结果</h3>

<p><img src="http://charlescui.github.io/images/posts/vlcsnap-2014-05-01-09h56m04s143.png" alt="直播截图" title="湖南卫视" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三分地的花园洋房]]></title>
    <link href="http://charlescui.github.io/blog/2014/02/23/house/"/>
    <updated>2014-02-23T13:52:11+08:00</updated>
    <id>http://charlescui.github.io/blog/2014/02/23/house</id>
    <content type="html"><![CDATA[<p><img src="http://charlescui.github.io/images/posts/bigbang.png" alt="鸟瞰图" title="花园洋房" /></p>

<p>看过《绿野仙踪》的孩子有着森林的梦，那里有花草树木，有飞鸟鱼虫。如果能给我一点点绿地，任我发挥，我想造这样的大房子，这是我的中国梦。
<!--more--></p>

<h3 id="section">楼层介绍</h3>

<h5 id="section-1">一楼</h5>

<p><img src="http://charlescui.github.io/images/posts/bigbang_1f.png" alt="一楼" title="一楼俯视图" /></p>

<ul>
  <li>客厅宽敞，朝南两扇大窗户。一个卧室给不方便上下楼的长辈居住。</li>
</ul>

<h5 id="section-2">二楼</h5>

<p><img src="http://charlescui.github.io/images/posts/bigbang_2f.png" alt="二楼" title="二楼俯视图" /></p>

<ul>
  <li>书房有三扇窗户，宽敞通透。但卫生间设计的不好，只有一个卧室有，其他卧室要上卫生间就麻烦了。</li>
</ul>

<h5 id="section-3">三楼</h5>

<p><img src="http://charlescui.github.io/images/posts/bigbang_3f.png" alt="三楼" title="三楼俯视图" /></p>

<ul>
  <li>三楼一个宽敞的大露台，可以乘凉，可以眺望远方，和一楼的大露台交相辉映，看着就心里宽敞。</li>
</ul>

<p><code>捞3D渲染机制有问题，本来设计的是三层的楼，但只显示了一层</code></p>

<iframe src="http://www.lao3d.com/model_link.html?modelid=9997" allowfullscreen="true" width="600" height="450"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[室内模型设计初笔]]></title>
    <link href="http://charlescui.github.io/blog/2014/02/23/design/"/>
    <updated>2014-02-23T02:43:46+08:00</updated>
    <id>http://charlescui.github.io/blog/2014/02/23/design</id>
    <content type="html"><![CDATA[<p><img src="http://charlescui.github.io/images/posts/xxwz.png" alt="鸟瞰图" title="大平层" /></p>

<p>城区内现在的房子偏爱豪装+大平层，200-300平方左右的平层，配上单价6000RMB上下的精装修，便可挽回部分向往郊区排屋、独栋的业主的心。
<!--more-->
不过，据我媳妇说，还是有大楼梯上下层打通的房子才更气派，那种站在楼梯下，婚纱的裙摆霸气的铺开，那种感觉是平层的心永远无法理解的。</p>

<p>话说回来，最近有部电影很火：<a href="www.letv.com/ptv/vplay/2234163.html">«来自星星的你»</a>，里面男女主人公的大豪宅掀起了不少少妇的豪宅梦。</p>

<iframe src="http://www.lao3d.com/model_link.html?modelid=9992" allowfullscreen="true" width="600" height="450"></iframe>
]]></content>
  </entry>
  
</feed>
